<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on wxx&#39;s blog</title>
    <link>http://oouxx.github.io/tags/python/</link>
    <description>Recent content in Python on wxx&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 31 Oct 2019 09:36:55 +0800</lastBuildDate>
    
	<atom:link href="http://oouxx.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>scrapy-redis重复过滤器源码分析</title>
      <link>http://oouxx.github.io/post/scrapy-redis%E9%87%8D%E5%A4%8D%E8%BF%87%E6%BB%A4%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 31 Oct 2019 09:36:55 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/scrapy-redis%E9%87%8D%E5%A4%8D%E8%BF%87%E6%BB%A4%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>scrapy时Python界非常著名的爬虫框架,但是一遇到分布式应用的话就会捉襟见肘了,scrapy-redis就是为了解决这一痛点诞生的,</description>
    </item>
    
    <item>
      <title>Python中的拷贝</title>
      <link>http://oouxx.github.io/post/python%E4%B8%AD%E7%9A%84%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Tue, 21 May 2019 04:38:01 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/python%E4%B8%AD%E7%9A%84%E6%8B%B7%E8%B4%9D/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import copy a = [1, 2, 3, 4, [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;]] #原始对象 b = a #赋值，传对象的引用 c = copy.copy(a) #对象拷贝，浅拷贝 d = copy.deepcopy(a) #对象拷贝，深</description>
    </item>
    
    <item>
      <title>Python闭包</title>
      <link>http://oouxx.github.io/post/python%E9%97%AD%E5%8C%85/</link>
      <pubDate>Tue, 21 May 2019 01:22:40 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/python%E9%97%AD%E5%8C%85/</guid>
      <description>闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。 当一个内嵌函数引用其外部作作</description>
    </item>
    
    <item>
      <title>多重继承和c3算法</title>
      <link>http://oouxx.github.io/post/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%92%8Cc3%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 19 May 2019 23:52:04 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%92%8Cc3%E7%AE%97%E6%B3%95/</guid>
      <description>关于MRO 和 C3算法 有一个sina的blog介绍的很好：python多重继承MRO mro即method resolution order，主要用于在多继承时判断调</description>
    </item>
    
    <item>
      <title>动态语言与鸭子类型</title>
      <link>http://oouxx.github.io/post/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80%E4%B8%8E%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 19 May 2019 09:14:03 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80%E4%B8%8E%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</guid>
      <description>动态语言 今天来说说编程语言中的动态类型语言与鸭子类型，维基百科对动态语言的定义： 动态编程语言是一类在运行时可以改变其结构的语言：例如新的函数</description>
    </item>
    
    <item>
      <title>面向切面编程和装饰器</title>
      <link>http://oouxx.github.io/post/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sun, 19 May 2019 01:18:40 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</guid>
      <description>今天来讨论一下装饰器。装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。装饰器是解决这类</description>
    </item>
    
    <item>
      <title>生成器和迭代器</title>
      <link>http://oouxx.github.io/post/%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E8%BF%AD%E4%BB%A3%E5%99%A8/</link>
      <pubDate>Sat, 18 May 2019 19:02:54 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid>
      <description>To understand what yield does, you must understand what generators are. And before you can understand generators, you must understand iterables. Iterables When you create a list, you can read its items one by one. Reading its items one by one is called iteration: 1 2 3 4 5 6 &amp;gt;&amp;gt;&amp;gt; mylist = [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; for i in mylist: ... print(i) 1 2 3 mylist is an iterable.</description>
    </item>
    
    <item>
      <title>Python中的单下划线和双下划线</title>
      <link>http://oouxx.github.io/post/python%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%8B%E5%88%92%E7%BA%BF%E5%92%8C%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF/</link>
      <pubDate>Sat, 18 May 2019 18:36:51 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/python%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%8B%E5%88%92%E7%BA%BF%E5%92%8C%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF/</guid>
      <description>Python中单下划线和双下划线 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &amp;gt;&amp;gt;&amp;gt; class MyClass(): ... def __init__(self): ... self.__superprivate = &amp;#34;Hello&amp;#34; ... self._semiprivate = &amp;#34;, world!&amp;#34; ... &amp;gt;&amp;gt;&amp;gt; mc = MyClass() &amp;gt;&amp;gt;&amp;gt; print mc.__superprivate Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; AttributeError: myClass instance has no attribute</description>
    </item>
    
    <item>
      <title>静态方法和类方法</title>
      <link>http://oouxx.github.io/post/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 18 May 2019 18:02:28 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/</guid>
      <description>@staticmethod和@classmethod Python其实有3个方法,即静态方法(staticmethod),类方法(classm</description>
    </item>
    
    <item>
      <title>Python中的参数传递</title>
      <link>http://oouxx.github.io/post/python%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</link>
      <pubDate>Fri, 17 May 2019 23:47:34 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/python%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</guid>
      <description>Python的函数参数传递 先看下面两段代码 1 2 3 4 5 6 7 8 9 10 11 12 13 # List - a mutable type def try_to_change_list_contents(the_list): print(&amp;#39;got&amp;#39;, the_list) the_list.append(&amp;#39;four&amp;#39;) print(&amp;#39;changed:&amp;#39;, the_list) the_list = [&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;, &amp;#39;four&amp;#39;, &amp;#39;five&amp;#39;] print(&amp;#39;changed:&amp;#39;, the_list) outer_list = [&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;] if __name__ == &amp;#39;__main__&amp;#39;: print(&amp;#39;before, outer_list=&amp;#39;, outer_list) try_to_change_list_contents(outer_list) print(&amp;#39;after,</description>
    </item>
    
    <item>
      <title>tornado.web.RequestHandler异常处理</title>
      <link>http://oouxx.github.io/post/tornado-web-requesthandler%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 08 May 2019 07:23:28 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/tornado-web-requesthandler%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>tornado.web.RequestHandler异常处理 tornado异常处理要从_handle_request_execption开始</description>
    </item>
    
    <item>
      <title>单例模式及其实现</title>
      <link>http://oouxx.github.io/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 06 May 2019 06:56:45 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</guid>
      <description>什么是单例模式 单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需</description>
    </item>
    
    <item>
      <title>process.fork_process剖析tornado多进程原理</title>
      <link>http://oouxx.github.io/post/process-fork-process%E5%89%96%E6%9E%90tornado%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 06 May 2019 05:13:31 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/process-fork-process%E5%89%96%E6%9E%90tornado%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%8E%9F%E7%90%86/</guid>
      <description>process.fork_process剖析tornado多进程原理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36</description>
    </item>
    
    <item>
      <title>鸟瞰tornado</title>
      <link>http://oouxx.github.io/post/%E9%B8%9F%E7%9E%B0tornado/</link>
      <pubDate>Mon, 06 May 2019 02:17:48 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/%E9%B8%9F%E7%9E%B0tornado/</guid>
      <description>鸟瞰tornado Web framework tornado.web — RequestHandler and Application classes tornado.template — Flexible output generation tornado.routing — Basic routing implementation tornado.escape — Escaping and string manipulation tornado.locale — Internationalization support tornado.websocket — Bidirectional communication to the browser HTTP servers and clients tornado.httpserver — Non-blocking HTTP server tornado.httpclient — Asynchronous HTTP client tornado.httputil — Manipulate HTTP headers and URLs tornado.http1connection – HTTP/1.x client/server implementation</description>
    </item>
    
    <item>
      <title>Python异步IO之协程</title>
      <link>http://oouxx.github.io/post/python%E5%BC%82%E6%AD%A5io%E4%B9%8B%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sat, 04 May 2019 06:04:04 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/python%E5%BC%82%E6%AD%A5io%E4%B9%8B%E5%8D%8F%E7%A8%8B/</guid>
      <description>协程 协程，又称微线程，纤程。英文名Coroutine。 协程的概念很早就提出来了，但直到最近几年才在某些语言（如Lua）中得到广泛应用。 子程序</description>
    </item>
    
    <item>
      <title>tornadosql源码解读</title>
      <link>http://oouxx.github.io/post/tornadosql%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Fri, 03 May 2019 19:28:03 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/tornadosql%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</guid>
      <description>tornadosql源码解读 因为MySQLdb不支持Python3，并且Python2将于2020.1.1停止维护，所以将MySQLdb替换</description>
    </item>
    
    <item>
      <title>发布自己的软件包到pypi</title>
      <link>http://oouxx.github.io/post/%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%88%B0pypi/</link>
      <pubDate>Wed, 24 Apr 2019 01:48:32 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%88%B0pypi/</guid>
      <description>Make your code pulish-ready 首先准备好即将发布的软件包，并且保证没有任何无关的代码或者那些无关的代码在if __name__ == &#39;__main__&#39;:下，并且确保你的软件包下面有</description>
    </item>
    
    <item>
      <title>Python中的除法</title>
      <link>http://oouxx.github.io/post/python%E4%B8%AD%E7%9A%84%E9%99%A4%E6%B3%95/</link>
      <pubDate>Wed, 17 Apr 2019 10:44:49 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/python%E4%B8%AD%E7%9A%84%E9%99%A4%E6%B3%95/</guid>
      <description>“/”和“//” &amp;ldquo;/&amp;rdquo; 在python2中为传统除法，即当除数被除数都为整数时结果为舍去小数部分的整数，除数和被除数有一个为浮点数，结果为精确的浮</description>
    </item>
    
    <item>
      <title>matplotlib的使用</title>
      <link>http://oouxx.github.io/post/%E5%91%A8%E8%8E%AB%E7%83%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Bmatplotlib%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 05 Dec 2018 21:14:31 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/%E5%91%A8%E8%8E%AB%E7%83%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Bmatplotlib%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>安装 1 2 3 $ pip3 install matplotlib // 在用的时候会报错ModuleNotFoundError: No module named &amp;#39;tkinter&amp;#39; $ sudo apt-get install python3-tk 简单使用 1 2 3 4 5 x = np.linspace(-1, 1, 50) # 生成线段 y = 2*x+1 plt.figure()</description>
    </item>
    
    <item>
      <title>pdb调试命令</title>
      <link>http://oouxx.github.io/post/pdb%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 02 Dec 2018 17:10:13 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/pdb%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4/</guid>
      <description>instructions instruction comment break/b 设置断点 continue/c 继续执行程序 list/l 查看当前行附近代码段 step/s 进入函数 return/r 执行代码直到当前函数返回 exit/q 中止并退出 next/n 执行下一行 pp 打印变量值 help 帮助 how can i use it</description>
    </item>
    
    <item>
      <title>leetcode-AddTwoNumbers.md</title>
      <link>http://oouxx.github.io/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-addtwonumbers/</link>
      <pubDate>Fri, 23 Nov 2018 20:08:55 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-addtwonumbers/</guid>
      <description>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Example: 1 2 3 Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt;</description>
    </item>
    
    <item>
      <title>leetcode刷题记--RomamToInteger.md</title>
      <link>http://oouxx.github.io/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-romamtointeger/</link>
      <pubDate>Thu, 22 Nov 2018 16:13:24 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-romamtointeger/</guid>
      <description>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. 1 2 3 4 5 6 7 8 Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, two is written as II in Roman numeral, just two one&amp;rsquo;s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven</description>
    </item>
    
    <item>
      <title>leetcode--ThreeSum.md</title>
      <link>http://oouxx.github.io/post/leetcode-threesum/</link>
      <pubDate>Sat, 17 Nov 2018 18:38:54 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/leetcode-threesum/</guid>
      <description>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero. Note: The solution set must not contain duplicate triplets. Example: Given array nums = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1, 2] ] 1</description>
    </item>
    
    <item>
      <title>Python的Bunch模式</title>
      <link>http://oouxx.github.io/post/python%E7%9A%84bunch%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 30 Oct 2018 21:41:57 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/python%E7%9A%84bunch%E6%A8%A1%E5%BC%8F/</guid>
      <description>Python的Bunch模式 今天在看Python algorithm，看到了这个东西，感觉会很有用，赶快拿起vim码起字来分享给大家。我也粗略</description>
    </item>
    
    <item>
      <title>leetcode刷题记--LongestCommonPrefix-续</title>
      <link>http://oouxx.github.io/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-longestcommonprefix-%E7%BB%AD/</link>
      <pubDate>Fri, 26 Oct 2018 21:36:42 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-longestcommonprefix-%E7%BB%AD/</guid>
      <description>解法剖析 来自leetcode 具体的内容我就不复制粘贴了，只讲一下我对每种解法的理解 Horizontal scanning 1 2 3 4 5 6 7 8 9 10 public String longestCommonPrefix(String[] strs) { if (strs.length == 0) return &amp;#34;&amp;#34;; String prefix = strs[0]; for (int</description>
    </item>
    
    <item>
      <title>leetcode刷题记--LongestCommonPrefix</title>
      <link>http://oouxx.github.io/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-longestcommonprefix/</link>
      <pubDate>Thu, 25 Oct 2018 15:49:35 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-longestcommonprefix/</guid>
      <description>Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string &amp;ldquo;&amp;quot;. Example 1: 1 2 Input: [&amp;#34;flower&amp;#34;,&amp;#34;flow&amp;#34;,&amp;#34;flight&amp;#34;] Output: &amp;#34;fl&amp;#34; Example 2: 1 2 3 Input: [&amp;#34;dog&amp;#34;,&amp;#34;racecar&amp;#34;,&amp;#34;car&amp;#34;] Output: &amp;#34;&amp;#34; Explanation: There is no common prefix among the input strings. Note: All given inputs are in lowercase letters a-z. My Answer: 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>leetcode刷题记--ReverseInteger-续</title>
      <link>http://oouxx.github.io/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-reverseinteger-%E7%BB%AD/</link>
      <pubDate>Wed, 24 Oct 2018 08:30:00 +0800</pubDate>
      
      <guid>http://oouxx.github.io/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-reverseinteger-%E7%BB%AD/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution: def reverse(self, x): # 取出符号位 sign = -1 if x&amp;lt;0 else 1 # 把x化为正数 x*=sign rev = 0 while not x==0: rev*=10 rev += x%10 x = x//10 if not -2**31&amp;lt;=rev&amp;lt;=2**31-1: return 0 return rev*sign 上面代码是在lee</description>
    </item>
    
  </channel>
</rss>