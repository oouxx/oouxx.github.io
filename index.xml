<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>wxx&#39;s blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on wxx&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 31 Oct 2019 09:36:55 +0800</lastBuildDate>
    
	<atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>scrapy-redis重复过滤器源码分析</title>
      <link>http://localhost:1313/post/scrapy-redis%E9%87%8D%E5%A4%8D%E8%BF%87%E6%BB%A4%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</link>
      <pubDate>Thu, 31 Oct 2019 09:36:55 +0800</pubDate>
      
      <guid>http://localhost:1313/post/scrapy-redis%E9%87%8D%E5%A4%8D%E8%BF%87%E6%BB%A4%E5%99%A8%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/</guid>
      <description>scrapy时Python界非常著名的爬虫框架,但是一遇到分布式应用的话就会捉襟见肘了,scrapy-redis就是为了解决这一痛点诞生的,</description>
    </item>
    
    <item>
      <title>我的工作空间</title>
      <link>http://localhost:1313/post/my-development-tools/</link>
      <pubDate>Sat, 26 Oct 2019 12:29:45 +0800</pubDate>
      
      <guid>http://localhost:1313/post/my-development-tools/</guid>
      <description>我的开发工具 Windows平台 Cmder VIM VSCode Idea quick look(类似于mac的空格预览) libtary(类似mac的启动器) AutoHotKey(键盘映射</description>
    </item>
    
    <item>
      <title>最小权限原则</title>
      <link>http://localhost:1313/post/%E6%9C%80%E5%B0%8F%E6%9D%83%E9%99%90%E5%8E%9F%E5%88%99/</link>
      <pubDate>Mon, 23 Sep 2019 17:32:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E6%9C%80%E5%B0%8F%E6%9D%83%E9%99%90%E5%8E%9F%E5%88%99/</guid>
      <description>最小权限原则 最小权限原则最早出现在《容错的操作系统》一书中，他的要求是计算环境中的特定抽象层的每个模块如进程、用户或者计算机程序只能访问当下</description>
    </item>
    
    <item>
      <title>go切片的内部结构</title>
      <link>http://localhost:1313/post/go%E5%88%87%E7%89%87%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 09 Jun 2019 17:13:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/go%E5%88%87%E7%89%87%E7%9A%84%E5%86%85%E9%83%A8%E7%BB%93%E6%9E%84/</guid>
      <description>go切片的内部结构 1 2 3 4 5 6 7 struct Slice { byte* array; // actual data uintgo len; // number of elements uintgo cap; // allocated number of elements }; unsafe.Sizeof(slice)无论如何返回的都是24，</description>
    </item>
    
    <item>
      <title>proxychains-ng代理上網</title>
      <link>http://localhost:1313/post/privoxy%E7%9C%9F%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/</link>
      <pubDate>Fri, 31 May 2019 17:00:43 +0800</pubDate>
      
      <guid>http://localhost:1313/post/privoxy%E7%9C%9F%E5%85%A8%E5%B1%80%E4%BB%A3%E7%90%86/</guid>
      <description>使用proxychains-ng实现真全局代理 安装和使用 1 2 sudo pacman -S proxychains-ng sudo echo &amp;#34;socks5 127.0.0.1 1080&amp;#34; &amp;gt;&amp;gt; /etc/proxychains.conf 验证 1 proxychains curl -I www.google.com 返回200就说明代理成功啦</description>
    </item>
    
    <item>
      <title>docker入门教程</title>
      <link>http://localhost:1313/post/docker%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</link>
      <pubDate>Sun, 26 May 2019 09:44:07 +0800</pubDate>
      
      <guid>http://localhost:1313/post/docker%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</guid>
      <description>docker 安装 下面以Ubuntu为例介绍docker的安装 卸载旧版本 1 2 3 $ sudo apt-get remove docker \ docker-engine \ docker.io 使用apt安装 1 2 3 4 5 6 7 8 $ sudo apt-get update $ curl -fsSL https://mirrors.ustc.edu.cn/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</description>
    </item>
    
    <item>
      <title>select,poll和epoll总结</title>
      <link>http://localhost:1313/post/select-poll%E5%92%8Cepoll%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sat, 25 May 2019 12:07:51 +0800</pubDate>
      
      <guid>http://localhost:1313/post/select-poll%E5%92%8Cepoll%E6%80%BB%E7%BB%93/</guid>
      <description>区别与联系 联系：他们三个都是在Linux上使用的I/O多路复用技术，与多进程和多线程技术相比，I/O多路复用技术的最大优势是系统开销小，系统</description>
    </item>
    
    <item>
      <title>对数器Python版</title>
      <link>http://localhost:1313/post/%E5%AF%B9%E6%95%B0%E5%99%A8python%E7%89%88/</link>
      <pubDate>Wed, 22 May 2019 18:38:17 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%AF%B9%E6%95%B0%E5%99%A8python%E7%89%88/</guid>
      <description>最近跟左神学算法然后才听说有对数器这么个东西，特地实现了个Python版跟大家一起分享 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27</description>
    </item>
    
    <item>
      <title>Python中的拷贝</title>
      <link>http://localhost:1313/post/python%E4%B8%AD%E7%9A%84%E6%8B%B7%E8%B4%9D/</link>
      <pubDate>Tue, 21 May 2019 04:38:01 +0800</pubDate>
      
      <guid>http://localhost:1313/post/python%E4%B8%AD%E7%9A%84%E6%8B%B7%E8%B4%9D/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 import copy a = [1, 2, 3, 4, [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;]] #原始对象 b = a #赋值，传对象的引用 c = copy.copy(a) #对象拷贝，浅拷贝 d = copy.deepcopy(a) #对象拷贝，深</description>
    </item>
    
    <item>
      <title>Python闭包</title>
      <link>http://localhost:1313/post/python%E9%97%AD%E5%8C%85/</link>
      <pubDate>Tue, 21 May 2019 01:22:40 +0800</pubDate>
      
      <guid>http://localhost:1313/post/python%E9%97%AD%E5%8C%85/</guid>
      <description>闭包(closure)是函数式编程的重要的语法结构。闭包也是一种组织代码的结构，它同样提高了代码的可重复使用性。 当一个内嵌函数引用其外部作作</description>
    </item>
    
    <item>
      <title>多重继承和c3算法</title>
      <link>http://localhost:1313/post/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%92%8Cc3%E7%AE%97%E6%B3%95/</link>
      <pubDate>Sun, 19 May 2019 23:52:04 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%A4%9A%E9%87%8D%E7%BB%A7%E6%89%BF%E5%92%8Cc3%E7%AE%97%E6%B3%95/</guid>
      <description>关于MRO 和 C3算法 有一个sina的blog介绍的很好：python多重继承MRO mro即method resolution order，主要用于在多继承时判断调</description>
    </item>
    
    <item>
      <title>动态语言与鸭子类型</title>
      <link>http://localhost:1313/post/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80%E4%B8%8E%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 19 May 2019 09:14:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80%E4%B8%8E%E9%B8%AD%E5%AD%90%E7%B1%BB%E5%9E%8B/</guid>
      <description>动态语言 今天来说说编程语言中的动态类型语言与鸭子类型，维基百科对动态语言的定义： 动态编程语言是一类在运行时可以改变其结构的语言：例如新的函数</description>
    </item>
    
    <item>
      <title>面向切面编程和装饰器</title>
      <link>http://localhost:1313/post/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</link>
      <pubDate>Sun, 19 May 2019 01:18:40 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B/</guid>
      <description>今天来讨论一下装饰器。装饰器是一个很著名的设计模式，经常被用于有切面需求的场景，较为经典的有插入日志、性能测试、事务处理等。装饰器是解决这类</description>
    </item>
    
    <item>
      <title>args和kwargs</title>
      <link>http://localhost:1313/post/args%E5%92%8Ckwargs/</link>
      <pubDate>Sat, 18 May 2019 19:11:58 +0800</pubDate>
      
      <guid>http://localhost:1313/post/args%E5%92%8Ckwargs/</guid>
      <description>*args和**kwargs 用*args和**kwargs只是为了方便并没有强制使用它们. 当你不确定你的函数里将要传递多少参数时你可以用*a</description>
    </item>
    
    <item>
      <title>生成器和迭代器</title>
      <link>http://localhost:1313/post/%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E8%BF%AD%E4%BB%A3%E5%99%A8/</link>
      <pubDate>Sat, 18 May 2019 19:02:54 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%94%9F%E6%88%90%E5%99%A8%E5%92%8C%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid>
      <description>To understand what yield does, you must understand what generators are. And before you can understand generators, you must understand iterables. Iterables When you create a list, you can read its items one by one. Reading its items one by one is called iteration: 1 2 3 4 5 6 &amp;gt;&amp;gt;&amp;gt; mylist = [1, 2, 3] &amp;gt;&amp;gt;&amp;gt; for i in mylist: ... print(i) 1 2 3 mylist is an iterable.</description>
    </item>
    
    <item>
      <title>Python中的单下划线和双下划线</title>
      <link>http://localhost:1313/post/python%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%8B%E5%88%92%E7%BA%BF%E5%92%8C%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF/</link>
      <pubDate>Sat, 18 May 2019 18:36:51 +0800</pubDate>
      
      <guid>http://localhost:1313/post/python%E4%B8%AD%E7%9A%84%E5%8D%95%E4%B8%8B%E5%88%92%E7%BA%BF%E5%92%8C%E5%8F%8C%E4%B8%8B%E5%88%92%E7%BA%BF/</guid>
      <description>Python中单下划线和双下划线 1 2 3 4 5 6 7 8 9 10 11 12 13 14 &amp;gt;&amp;gt;&amp;gt; class MyClass(): ... def __init__(self): ... self.__superprivate = &amp;#34;Hello&amp;#34; ... self._semiprivate = &amp;#34;, world!&amp;#34; ... &amp;gt;&amp;gt;&amp;gt; mc = MyClass() &amp;gt;&amp;gt;&amp;gt; print mc.__superprivate Traceback (most recent call last): File &amp;#34;&amp;lt;stdin&amp;gt;&amp;#34;, line 1, in &amp;lt;module&amp;gt; AttributeError: myClass instance has no attribute</description>
    </item>
    
    <item>
      <title>静态方法和类方法</title>
      <link>http://localhost:1313/post/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sat, 18 May 2019 18:02:28 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E7%B1%BB%E6%96%B9%E6%B3%95/</guid>
      <description>@staticmethod和@classmethod Python其实有3个方法,即静态方法(staticmethod),类方法(classm</description>
    </item>
    
    <item>
      <title>Python中的参数传递</title>
      <link>http://localhost:1313/post/python%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</link>
      <pubDate>Fri, 17 May 2019 23:47:34 +0800</pubDate>
      
      <guid>http://localhost:1313/post/python%E4%B8%AD%E7%9A%84%E5%8F%82%E6%95%B0%E4%BC%A0%E9%80%92/</guid>
      <description>Python的函数参数传递 先看下面两段代码 1 2 3 4 5 6 7 8 9 10 11 12 13 # List - a mutable type def try_to_change_list_contents(the_list): print(&amp;#39;got&amp;#39;, the_list) the_list.append(&amp;#39;four&amp;#39;) print(&amp;#39;changed:&amp;#39;, the_list) the_list = [&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;, &amp;#39;four&amp;#39;, &amp;#39;five&amp;#39;] print(&amp;#39;changed:&amp;#39;, the_list) outer_list = [&amp;#39;one&amp;#39;, &amp;#39;two&amp;#39;, &amp;#39;three&amp;#39;] if __name__ == &amp;#39;__main__&amp;#39;: print(&amp;#39;before, outer_list=&amp;#39;, outer_list) try_to_change_list_contents(outer_list) print(&amp;#39;after,</description>
    </item>
    
    <item>
      <title>tornado.web.RequestHandler异常处理</title>
      <link>http://localhost:1313/post/tornado-web-requesthandler%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</link>
      <pubDate>Wed, 08 May 2019 07:23:28 +0800</pubDate>
      
      <guid>http://localhost:1313/post/tornado-web-requesthandler%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</guid>
      <description>tornado.web.RequestHandler异常处理 tornado异常处理要从_handle_request_execption开始</description>
    </item>
    
    <item>
      <title>tornado的XSRF防护</title>
      <link>http://localhost:1313/post/tornado%E7%9A%84xsrf%E9%98%B2%E6%8A%A4/</link>
      <pubDate>Wed, 08 May 2019 07:02:22 +0800</pubDate>
      
      <guid>http://localhost:1313/post/tornado%E7%9A%84xsrf%E9%98%B2%E6%8A%A4/</guid>
      <description>XSRF XSRF（Cross-site request forgery，跨站请求伪造），也被简写为 CSRF，发音为”sea surf”，这是一个常见的安全漏洞（这里</description>
    </item>
    
    <item>
      <title>tornado安全cookie</title>
      <link>http://localhost:1313/post/tornado%E5%AE%89%E5%85%A8cookie/</link>
      <pubDate>Tue, 07 May 2019 02:21:39 +0800</pubDate>
      
      <guid>http://localhost:1313/post/tornado%E5%AE%89%E5%85%A8cookie/</guid>
      <description>tornado安全cookie 文章源代码过多，参照tornado源码看本文效果更佳 Secure Cookies Cookies 是不安全的，可以被客户端轻易修改和伪造，Tornad</description>
    </item>
    
    <item>
      <title>单例模式及其实现</title>
      <link>http://localhost:1313/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Mon, 06 May 2019 06:56:45 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E7%AE%80%E4%BB%8B/</guid>
      <description>什么是单例模式 单例模式，也叫单子模式，是一种常用的软件设计模式。在应用这个模式时，单例对象的类必须保证只有一个实例存在。许多时候整个系统只需</description>
    </item>
    
    <item>
      <title>process.fork_process剖析tornado多进程原理</title>
      <link>http://localhost:1313/post/process-fork-process%E5%89%96%E6%9E%90tornado%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%8E%9F%E7%90%86/</link>
      <pubDate>Mon, 06 May 2019 05:13:31 +0800</pubDate>
      
      <guid>http://localhost:1313/post/process-fork-process%E5%89%96%E6%9E%90tornado%E5%A4%9A%E8%BF%9B%E7%A8%8B%E5%8E%9F%E7%90%86/</guid>
      <description>process.fork_process剖析tornado多进程原理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36</description>
    </item>
    
    <item>
      <title>鸟瞰tornado</title>
      <link>http://localhost:1313/post/%E9%B8%9F%E7%9E%B0tornado/</link>
      <pubDate>Mon, 06 May 2019 02:17:48 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E9%B8%9F%E7%9E%B0tornado/</guid>
      <description>鸟瞰tornado Web framework tornado.web — RequestHandler and Application classes tornado.template — Flexible output generation tornado.routing — Basic routing implementation tornado.escape — Escaping and string manipulation tornado.locale — Internationalization support tornado.websocket — Bidirectional communication to the browser HTTP servers and clients tornado.httpserver — Non-blocking HTTP server tornado.httpclient — Asynchronous HTTP client tornado.httputil — Manipulate HTTP headers and URLs tornado.http1connection – HTTP/1.x client/server implementation</description>
    </item>
    
    <item>
      <title>Python异步IO之协程</title>
      <link>http://localhost:1313/post/python%E5%BC%82%E6%AD%A5io%E4%B9%8B%E5%8D%8F%E7%A8%8B/</link>
      <pubDate>Sat, 04 May 2019 06:04:04 +0800</pubDate>
      
      <guid>http://localhost:1313/post/python%E5%BC%82%E6%AD%A5io%E4%B9%8B%E5%8D%8F%E7%A8%8B/</guid>
      <description>协程 协程，又称微线程，纤程。英文名Coroutine。 协程的概念很早就提出来了，但直到最近几年才在某些语言（如Lua）中得到广泛应用。 子程序</description>
    </item>
    
    <item>
      <title>tornadosql源码解读</title>
      <link>http://localhost:1313/post/tornadosql%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</link>
      <pubDate>Fri, 03 May 2019 19:28:03 +0800</pubDate>
      
      <guid>http://localhost:1313/post/tornadosql%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</guid>
      <description>tornadosql源码解读 因为MySQLdb不支持Python3，并且Python2将于2020.1.1停止维护，所以将MySQLdb替换</description>
    </item>
    
    <item>
      <title>发布自己的软件包到pypi</title>
      <link>http://localhost:1313/post/%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%88%B0pypi/</link>
      <pubDate>Wed, 24 Apr 2019 01:48:32 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%8F%91%E5%B8%83%E8%87%AA%E5%B7%B1%E7%9A%84%E8%BD%AF%E4%BB%B6%E5%8C%85%E5%88%B0pypi/</guid>
      <description>Make your code pulish-ready 首先准备好即将发布的软件包，并且保证没有任何无关的代码或者那些无关的代码在if __name__ == &#39;__main__&#39;:下，并且确保你的软件包下面有</description>
    </item>
    
    <item>
      <title>epoll性能分析</title>
      <link>http://localhost:1313/post/epoll%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</link>
      <pubDate>Wed, 17 Apr 2019 15:17:09 +0800</pubDate>
      
      <guid>http://localhost:1313/post/epoll%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90/</guid>
      <description>本文源自stackoverflow的一个问答,斗胆翻译原文希望能从中收获知识（意译）。本人英语水平有限，如有错误还请指出。 精彩问答 Question Everything I’v</description>
    </item>
    
    <item>
      <title>修正github自动识别项目语言错误</title>
      <link>http://localhost:1313/post/%E4%BF%AE%E6%AD%A3github%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB%E9%A1%B9%E7%9B%AE%E8%AF%AD%E8%A8%80%E9%94%99%E8%AF%AF/</link>
      <pubDate>Wed, 17 Apr 2019 10:49:34 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BF%AE%E6%AD%A3github%E8%87%AA%E5%8A%A8%E8%AF%86%E5%88%AB%E9%A1%B9%E7%9B%AE%E8%AF%AD%E8%A8%80%E9%94%99%E8%AF%AF/</guid>
      <description>我在GitHub上提交了一个Python爬虫项目，我将爬取的结果保存为.html 文件，其他全部为Python文件，然而GitHub将我的项目</description>
    </item>
    
    <item>
      <title>删除自己编译的软件</title>
      <link>http://localhost:1313/post/%E5%88%A0%E9%99%A4%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E7%9A%84%E8%BD%AF%E4%BB%B6/</link>
      <pubDate>Wed, 17 Apr 2019 10:47:32 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%88%A0%E9%99%A4%E8%87%AA%E5%B7%B1%E7%BC%96%E8%AF%91%E7%9A%84%E8%BD%AF%E4%BB%B6/</guid>
      <description>删除自己编译的软件 编译安装 1 2 3 4 5 wget url cd dirname ./configure make make install 估计编译的时候很少有人去看屏幕上让人眼花的log输出，下面是install不同选项做的事</description>
    </item>
    
    <item>
      <title>Python中的除法</title>
      <link>http://localhost:1313/post/python%E4%B8%AD%E7%9A%84%E9%99%A4%E6%B3%95/</link>
      <pubDate>Wed, 17 Apr 2019 10:44:49 +0800</pubDate>
      
      <guid>http://localhost:1313/post/python%E4%B8%AD%E7%9A%84%E9%99%A4%E6%B3%95/</guid>
      <description>“/”和“//” &amp;ldquo;/&amp;rdquo; 在python2中为传统除法，即当除数被除数都为整数时结果为舍去小数部分的整数，除数和被除数有一个为浮点数，结果为精确的浮</description>
    </item>
    
    <item>
      <title>编译安装VIM8.0以及安装YouCompleteMe</title>
      <link>http://localhost:1313/post/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85vim8-0%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85youcompleteme/</link>
      <pubDate>Wed, 17 Apr 2019 10:42:20 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85vim8-0%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85youcompleteme/</guid>
      <description>今天心血来潮想搞一搞VIM，然后就不停的Google&amp;hellip;&amp;hellip;，找各种教程，遇到了各种问题麻烦（心累并快乐着）&amp;hel</description>
    </item>
    
    <item>
      <title>Windows引导修复</title>
      <link>http://localhost:1313/post/windows%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D/</link>
      <pubDate>Wed, 17 Apr 2019 10:40:02 +0800</pubDate>
      
      <guid>http://localhost:1313/post/windows%E5%BC%95%E5%AF%BC%E4%BF%AE%E5%A4%8D/</guid>
      <description>首先，先介绍一下我的状况：双系统，Windows10引导被误删，然后在网上各种Google教程，然并卵&amp;hellip;&amp;hellip;直到我</description>
    </item>
    
    <item>
      <title>pipenv虚拟环境工具详细教程</title>
      <link>http://localhost:1313/post/pipenv%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%B7%A5%E5%85%B7%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</link>
      <pubDate>Thu, 11 Apr 2019 02:25:44 +0800</pubDate>
      
      <guid>http://localhost:1313/post/pipenv%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E5%B7%A5%E5%85%B7%E8%AF%A6%E7%BB%86%E6%95%99%E7%A8%8B/</guid>
      <description>pipenv是requests库作者Kenneth Reitz编写的一个用于创建和管理Python虚拟环境的工具。 Pipenv是Python官</description>
    </item>
    
    <item>
      <title>hexo博客创建以及备份</title>
      <link>http://localhost:1313/post/hexo%E5%8D%9A%E5%AE%A2%E6%81%A2%E5%A4%8D%E4%BB%A5%E5%8F%8A%E5%A4%87%E4%BB%BD/</link>
      <pubDate>Tue, 02 Apr 2019 05:30:34 +0800</pubDate>
      
      <guid>http://localhost:1313/post/hexo%E5%8D%9A%E5%AE%A2%E6%81%A2%E5%A4%8D%E4%BB%A5%E5%8F%8A%E5%A4%87%E4%BB%BD/</guid>
      <description>hexo博客创建以及备份 首先确保本地环境已经安装node。 创建 环境安装 1 2 3 npm -g install hexo-cli npm -g install hexo-deployer-git npm install 初始化博客 1 hexo init myblog 修改配置文件 1 2 cd myblog vim _config.yml #</description>
    </item>
    
    <item>
      <title>Vimer的福利Vimium</title>
      <link>http://localhost:1313/post/vimer%E7%9A%84%E7%A6%8F%E5%88%A9vimium/</link>
      <pubDate>Thu, 13 Dec 2018 14:37:15 +0800</pubDate>
      
      <guid>http://localhost:1313/post/vimer%E7%9A%84%E7%A6%8F%E5%88%A9vimium/</guid>
      <description>Vimer的福利Vimium 这是一款适合Vimer在chrome浏览器上快速搜索浏览网页的插件,让你 在浏览器上也能摆脱鼠标畅快的浏览网页,下</description>
    </item>
    
    <item>
      <title>django中URLConf的设计哲学</title>
      <link>http://localhost:1313/post/django%E4%B8%ADurlconf%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%93%B2%E5%AD%A6/</link>
      <pubDate>Wed, 12 Dec 2018 12:47:56 +0800</pubDate>
      
      <guid>http://localhost:1313/post/django%E4%B8%ADurlconf%E7%9A%84%E8%AE%BE%E8%AE%A1%E5%93%B2%E5%AD%A6/</guid>
      <description>django中URLConf的设计哲学 一个干净的,优雅的URL方案是一个高质量Web应用程序的重要细节,django鼓励开发者使用漂亮的UR</description>
    </item>
    
    <item>
      <title>作为一个准程序员的随想</title>
      <link>http://localhost:1313/post/%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%87%86%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E9%9A%8F%E6%83%B3/</link>
      <pubDate>Wed, 12 Dec 2018 11:45:09 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E4%BD%9C%E4%B8%BA%E4%B8%80%E4%B8%AA%E5%87%86%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E9%9A%8F%E6%83%B3/</guid>
      <description>作为一个准程序员的随想 学好英文 当在初学一门技术时,有中文文档还是要看中文,哪怕老旧一点,英文文档进阶的时候看的 遇到bug不要钻牛角尖,有些东</description>
    </item>
    
    <item>
      <title>tensorflow的处理结构</title>
      <link>http://localhost:1313/post/%E5%91%A8%E8%8E%AB%E7%83%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Btensorflow/</link>
      <pubDate>Fri, 07 Dec 2018 17:43:30 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%91%A8%E8%8E%AB%E7%83%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Btensorflow/</guid>
      <description>处理结构 因为TensorFlow是采用数据流图（data flow graphs）来计算, 所以首先我们得创建一个数据流流图, 然后再将我 们的数据（数据以</description>
    </item>
    
    <item>
      <title>关于numpy.newaxis的一点理解</title>
      <link>http://localhost:1313/post/%E5%85%B3%E4%BA%8Enumpy-newaxis%E7%9A%84%E4%B8%80%E7%82%B9%E7%90%86%E8%A7%A3/</link>
      <pubDate>Fri, 07 Dec 2018 14:40:18 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%85%B3%E4%BA%8Enumpy-newaxis%E7%9A%84%E4%B8%80%E7%82%B9%E7%90%86%E8%A7%A3/</guid>
      <description>以下结果均在解释器下验证成功 通过查看源码和解释器验证发现np.newaxis是通过None实现的 1 2 3 4 5 &amp;gt;&amp;gt;&amp;gt; import numpy as np &amp;gt;&amp;gt;&amp;gt; type(np.newaxis) &amp;lt;class &amp;#39;NoneType&amp;#39;&amp;gt; &amp;gt;&amp;gt;&amp;gt; np.newaxis == None True 在理解</description>
    </item>
    
    <item>
      <title>matplotlib的使用</title>
      <link>http://localhost:1313/post/%E5%91%A8%E8%8E%AB%E7%83%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Bmatplotlib%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 05 Dec 2018 21:14:31 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%91%A8%E8%8E%AB%E7%83%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Bmatplotlib%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>安装 1 2 3 $ pip3 install matplotlib // 在用的时候会报错ModuleNotFoundError: No module named &amp;#39;tkinter&amp;#39; $ sudo apt-get install python3-tk 简单使用 1 2 3 4 5 x = np.linspace(-1, 1, 50) # 生成线段 y = 2*x+1 plt.figure()</description>
    </item>
    
    <item>
      <title>pandas学习笔记</title>
      <link>http://localhost:1313/post/%E5%91%A8%E8%8E%AB%E7%83%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Bpandas%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 04 Dec 2018 22:28:43 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%91%A8%E8%8E%AB%E7%83%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Bpandas%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>pandas与numpy的区别 pandas是基于numpy构建的,使得numpy为中心的应用变得更加简单,两个主要的数据结构:Series和</description>
    </item>
    
    <item>
      <title>numpy学习笔记</title>
      <link>http://localhost:1313/post/%E5%91%A8%E8%8E%AB%E7%83%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Bnumpy%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 04 Dec 2018 21:59:55 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%91%A8%E8%8E%AB%E7%83%A6%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8Bnumpy%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>numpy介绍 NumPy是使用Python进行科学计算的基础包。它包含其他内容： 一个强大的N维数组对象 复杂的（广播）功能 用于集成C / C ++和</description>
    </item>
    
    <item>
      <title>BF算法C&#43;&#43;版</title>
      <link>http://localhost:1313/post/bruteforcealgoritmc&#43;&#43;ver/</link>
      <pubDate>Tue, 04 Dec 2018 10:25:50 +0800</pubDate>
      
      <guid>http://localhost:1313/post/bruteforcealgoritmc&#43;&#43;ver/</guid>
      <description>这是字符串暴力匹配算法的C_++版本 暴力匹配的思路:使用穷举的方法,目标串和模式串进行匹配,一旦失配,目标串指针(或者说数组索引值)回退到下</description>
    </item>
    
    <item>
      <title>KMP算法C&#43;&#43;版</title>
      <link>http://localhost:1313/post/kmpalgorithmc&#43;&#43;ver/</link>
      <pubDate>Tue, 04 Dec 2018 10:25:50 +0800</pubDate>
      
      <guid>http://localhost:1313/post/kmpalgorithmc&#43;&#43;ver/</guid>
      <description>KMP算法C++版本 KMP算法基本思路:构造next[]减少回溯 next的构造 1 2 3 4 5 6 7 8 9 10 11 12 void GetNext(SqString t, int next[]){ int j,k; j=0;k=-1; next[0] = -1; while(j &amp;lt; t.length-1){ if(k==-1 || t.data[j]==t.data[k]){ j++;k++; next[i]=k;</description>
    </item>
    
    <item>
      <title>前端评论系统集成</title>
      <link>http://localhost:1313/post/%E5%89%8D%E7%AB%AF%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E9%9B%86%E6%88%90/</link>
      <pubDate>Mon, 03 Dec 2018 20:34:20 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%89%8D%E7%AB%AF%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%E9%9B%86%E6%88%90/</guid>
      <description>vue-disqus 项目地址,使用的是全球第二大评论系统disqus,我的个人博客用的也是这个评论系统,质量没的说很好,但是要梯子. vue-gitcomment 项目地址,这个评论系统是</description>
    </item>
    
    <item>
      <title>pdb调试命令</title>
      <link>http://localhost:1313/post/pdb%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Sun, 02 Dec 2018 17:10:13 +0800</pubDate>
      
      <guid>http://localhost:1313/post/pdb%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4/</guid>
      <description>instructions instruction comment break/b 设置断点 continue/c 继续执行程序 list/l 查看当前行附近代码段 step/s 进入函数 return/r 执行代码直到当前函数返回 exit/q 中止并退出 next/n 执行下一行 pp 打印变量值 help 帮助 how can i use it</description>
    </item>
    
    <item>
      <title>快速排序Java版简单示例.md</title>
      <link>http://localhost:1313/post/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8Fjava%E7%89%88%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Sat, 01 Dec 2018 18:34:38 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8Fjava%E7%89%88%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import java.util.Scanner; public class Main{ public static void main(String[] args){ Scanner sc = new Scanner(System.in); int n = sc.nextInt(); int[] array = new int[n]; for(int i=0;i&amp;lt;n;i++){ array[i] = sc.nextInt();</description>
    </item>
    
    <item>
      <title>在vue中集成markdown</title>
      <link>http://localhost:1313/post/%E5%9C%A8vue%E4%B8%AD%E9%9B%86%E6%88%90markdown/</link>
      <pubDate>Fri, 30 Nov 2018 21:20:33 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%9C%A8vue%E4%B8%AD%E9%9B%86%E6%88%90markdown/</guid>
      <description>为了在自己的vue中集成markdown真的试遍了所有的方法,终于成功了,特此发布博文记录一下. 我的失败经历 使用vue-markdown + highlightjs</description>
    </item>
    
    <item>
      <title>leetcode-AddTwoNumbers.md</title>
      <link>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-addtwonumbers/</link>
      <pubDate>Fri, 23 Nov 2018 20:08:55 +0800</pubDate>
      
      <guid>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-addtwonumbers/</guid>
      <description>You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list. You may assume the two numbers do not contain any leading zero, except the number 0 itself. Example: 1 2 3 Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt;</description>
    </item>
    
    <item>
      <title>leetcode刷题记--RomamToInteger.md</title>
      <link>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-romamtointeger/</link>
      <pubDate>Thu, 22 Nov 2018 16:13:24 +0800</pubDate>
      
      <guid>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-romamtointeger/</guid>
      <description>Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M. 1 2 3 4 5 6 7 8 Symbol Value I 1 V 5 X 10 L 50 C 100 D 500 M 1000 For example, two is written as II in Roman numeral, just two one&amp;rsquo;s added together. Twelve is written as, XII, which is simply X + II. The number twenty seven</description>
    </item>
    
    <item>
      <title>leetcode--ThreeSum.md</title>
      <link>http://localhost:1313/post/leetcode-threesum/</link>
      <pubDate>Sat, 17 Nov 2018 18:38:54 +0800</pubDate>
      
      <guid>http://localhost:1313/post/leetcode-threesum/</guid>
      <description>Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero. Note: The solution set must not contain duplicate triplets. Example: Given array nums = [-1, 0, 1, 2, -1, -4], A solution set is: [ [-1, 0, 1], [-1, -1, 2] ] 1</description>
    </item>
    
    <item>
      <title>Python的Bunch模式</title>
      <link>http://localhost:1313/post/python%E7%9A%84bunch%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 30 Oct 2018 21:41:57 +0800</pubDate>
      
      <guid>http://localhost:1313/post/python%E7%9A%84bunch%E6%A8%A1%E5%BC%8F/</guid>
      <description>Python的Bunch模式 今天在看Python algorithm，看到了这个东西，感觉会很有用，赶快拿起vim码起字来分享给大家。我也粗略</description>
    </item>
    
    <item>
      <title>leetcode刷题记--LongestCommonPrefix-续</title>
      <link>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-longestcommonprefix-%E7%BB%AD/</link>
      <pubDate>Fri, 26 Oct 2018 21:36:42 +0800</pubDate>
      
      <guid>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-longestcommonprefix-%E7%BB%AD/</guid>
      <description>解法剖析 来自leetcode 具体的内容我就不复制粘贴了，只讲一下我对每种解法的理解 Horizontal scanning 1 2 3 4 5 6 7 8 9 10 public String longestCommonPrefix(String[] strs) { if (strs.length == 0) return &amp;#34;&amp;#34;; String prefix = strs[0]; for (int</description>
    </item>
    
    <item>
      <title>leetcode刷题记--LongestCommonPrefix</title>
      <link>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-longestcommonprefix/</link>
      <pubDate>Thu, 25 Oct 2018 15:49:35 +0800</pubDate>
      
      <guid>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-longestcommonprefix/</guid>
      <description>Write a function to find the longest common prefix string amongst an array of strings. If there is no common prefix, return an empty string &amp;ldquo;&amp;quot;. Example 1: 1 2 Input: [&amp;#34;flower&amp;#34;,&amp;#34;flow&amp;#34;,&amp;#34;flight&amp;#34;] Output: &amp;#34;fl&amp;#34; Example 2: 1 2 3 Input: [&amp;#34;dog&amp;#34;,&amp;#34;racecar&amp;#34;,&amp;#34;car&amp;#34;] Output: &amp;#34;&amp;#34; Explanation: There is no common prefix among the input strings. Note: All given inputs are in lowercase letters a-z. My Answer: 1 2 3 4 5 6</description>
    </item>
    
    <item>
      <title>leetcode刷题记--ReverseInteger-续</title>
      <link>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-reverseinteger-%E7%BB%AD/</link>
      <pubDate>Wed, 24 Oct 2018 08:30:00 +0800</pubDate>
      
      <guid>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-reverseinteger-%E7%BB%AD/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 class Solution: def reverse(self, x): # 取出符号位 sign = -1 if x&amp;lt;0 else 1 # 把x化为正数 x*=sign rev = 0 while not x==0: rev*=10 rev += x%10 x = x//10 if not -2**31&amp;lt;=rev&amp;lt;=2**31-1: return 0 return rev*sign 上面代码是在lee</description>
    </item>
    
    <item>
      <title>leetcode刷题记--ReverseInteger</title>
      <link>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-reverseinteger/</link>
      <pubDate>Tue, 23 Oct 2018 22:10:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-reverseinteger/</guid>
      <description>Given a 32-bit signed integer, reverse digits of an integer Example 1: 1 2 Input: 123 Output: 321 Example 2: 1 2 Input: -123 Output: -321 Example 3: 1 2 Input: 120 Output: 21 Note: Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2**31, 2**31 − 1]. For the purpose of this problem,</description>
    </item>
    
    <item>
      <title>leetcode刷题记--TwoSum</title>
      <link>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-twosum/</link>
      <pubDate>Mon, 22 Oct 2018 09:23:40 +0800</pubDate>
      
      <guid>http://localhost:1313/post/leetcode%E5%88%B7%E9%A2%98%E8%AE%B0-twosum/</guid>
      <description>Given an array of integers, return indices of the two numbers such that they add up to a specific target. You may assume that each input would have exactly one solution, and you may not use the same element twice. Example: 1 2 3 4 Given nums = [2, 7, 11, 15], target = 9, Because nums[0] + nums[1] = 2 + 7 = 9, return [0, 1]. My answer:</description>
    </item>
    
    <item>
      <title>彩票下注程序</title>
      <link>http://localhost:1313/post/%E5%BD%A9%E7%A5%A8%E4%B8%8B%E6%B3%A8%E7%A8%8B%E5%BA%8F/</link>
      <pubDate>Sun, 21 Oct 2018 15:48:05 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E5%BD%A9%E7%A5%A8%E4%B8%8B%E6%B3%A8%E7%A8%8B%E5%BA%8F/</guid>
      <description>问题背景 Java实验课作业 问题描述 实现一个彩票游戏，要求允许用户输入下注的注数，每注七个不重复的号码并在1～35之间选取，最后输出要按照顺序</description>
    </item>
    
    <item>
      <title>json.dumps中的ensure_ascii参数</title>
      <link>http://localhost:1313/post/json-dumps%E4%B8%AD%E7%9A%84ensure-ascii%E5%8F%82%E6%95%B0/</link>
      <pubDate>Fri, 19 Oct 2018 20:58:36 +0800</pubDate>
      
      <guid>http://localhost:1313/post/json-dumps%E4%B8%AD%E7%9A%84ensure-ascii%E5%8F%82%E6%95%B0/</guid>
      <description>json.dumps 序列化时对中文默认使用的ascii编码,想输出真正的中文需要指定ensure_ascii=False。</description>
    </item>
    
    <item>
      <title>django天坑总结(一)</title>
      <link>http://localhost:1313/post/django%E5%A4%A9%E5%9D%91%E6%80%BB%E7%BB%93%E4%B8%80/</link>
      <pubDate>Thu, 18 Oct 2018 22:39:13 +0800</pubDate>
      
      <guid>http://localhost:1313/post/django%E5%A4%A9%E5%9D%91%E6%80%BB%E7%BB%93%E4%B8%80/</guid>
      <description>user表上的外键要允许设置为空 最近一段时间一直在学Python的一个重量级Web框架django，接下来的几篇博文中会总结一下我遇到的坑。</description>
    </item>
    
    <item>
      <title>理解utf-8</title>
      <link>http://localhost:1313/post/%E7%90%86%E8%A7%A3utf-8/</link>
      <pubDate>Mon, 15 Oct 2018 11:11:13 +0800</pubDate>
      
      <guid>http://localhost:1313/post/%E7%90%86%E8%A7%A3utf-8/</guid>
      <description>摘自 UTF-8的编码规则很简单，只有二条： 1）对于单字节的符号，字节的第一位设为0，后面7位为这个符号的unicode码。因此对于英语字母，</description>
    </item>
    
    <item>
      <title>MySQL安装问题</title>
      <link>http://localhost:1313/post/mysql%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</link>
      <pubDate>Mon, 15 Oct 2018 08:39:21 +0800</pubDate>
      
      <guid>http://localhost:1313/post/mysql%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98/</guid>
      <description>运行环境 XUbuntu 18.04LTS MySQL 5.7 问题描述 运行了下面命令后 1 $ sudo apt-get install mysql-server mysql-client libmysqlclient-dev 无法登陆mysql。 解决办法 因为在安装过程中并未提示设置root密码，就想着查看一下</description>
    </item>
    
    <item>
      <title>git使用</title>
      <link>http://localhost:1313/post/git%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sat, 13 Oct 2018 11:36:48 +0800</pubDate>
      
      <guid>http://localhost:1313/post/git%E4%BD%BF%E7%94%A8/</guid>
      <description>git git是目前最流行的版本控制工具，我以前学git的时候看得是一些几条命令快速入门git的文章，随着使用的深入发现那些命令已经远远不能满足需</description>
    </item>
    
  </channel>
</rss>